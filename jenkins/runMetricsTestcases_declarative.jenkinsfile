currentBuild.displayName = cycle

automated_component = "Automated"
metrics_components = [automated_component, "Metrics"]
testcase_components = [
    metrics_components + "AppInst",
    metrics_components + "Cloudlet",
    metrics_components + "ClusterInst",
    metrics_components + "DME",
    metrics_components + "VM"
    ]

pipeline{
    agent { label 'jenkinsSlave1' }
    parameters {
        string(name: 'SlaveNode', defaultValue: 'jenkinsSlave1')
        string(name: 'Cycle', defaultValue: '2021-11-05_CirrusR3.1')
        string(name: 'Project', defaultValue: 'ECQ')
        string(name: 'MasterController', defaultValue: 'console-qa.mobiledgex.net:443')
        string(name: 'InfluxDB', defaultValue: 'us-qa.influxdb.mobiledgex.net:8086')
        string(name: 'VariableFile', defaultValue: 'automation_variables.py')
        string(name: 'CommitVersion', defaultValue: 'master')
        booleanParam(name: 'RunFailedOnly', defaultValue: false)
        choice(name: 'TestTarget', choices: ['Metrics'], description: '')
        string(name: 'TestTimeout', defaultValue: '45m')
    }

    stages {
        stage("execute tests") {
            steps {
                script {
                    builds = [:]
                    testcase_components.eachWithIndex { value, index->
                        echo "${value}"
                        builds["${value[-1]}"] = {
                            build job: 'runTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNode), 
                                string(name: 'Components', value: value.join(',')), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: params.Cycle), 
                                string(name: 'MasterController', value: params.MasterController), 
                                string(name: 'InfluxDB', defaultValue: 'us-qa.influxdb.mobiledgex.net:8086'),
                                string(name: 'VariableFile', value: params.VariableFile), 
                                string(name: 'TestTarget', value: params.TestTarget),
                                string(name: 'TestTimeout', value: params.TestTimeout),
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    catchError {
                        parallel builds
                    }
                }
            }
            post {
                failure { echo "run metrics tests failed"}
            }
        }
    }
}
