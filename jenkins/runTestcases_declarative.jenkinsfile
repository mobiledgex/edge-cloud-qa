last_component = components.split(',')[-1]
version = cycle.split('_')[0]
//currentBuild.displayName = cycle + '_' + platform + area
currentBuild.displayName = cycle + '_' + testtarget + last_component

pipeline{
    agent { label SlaveNode }
    parameters {
        string(name: 'SlaveNode', defaultValue: 'jenkinsSlave1')
        string(name: 'Components', defaultValue: 'Automatedxx')
        string(name: 'Cycle', defaultValue: '2021-11-05_CirrusR3.1')
        string(name: 'Project', defaultValue: 'ECQ')
        string(name: 'MasterController', defaultValue: 'console-qa.mobiledgex.net:443')
        string(name: 'Controller', defaultValue: 'mexplat-qa-us.ctrl.mobiledgex.net:55001')
        string(name: 'DME', defaultValue: 'us-qa.dme.mobiledgex.net:50051')
        string(name: 'DMERest', defaultValue: 'us-qa.dme.mobiledgex.net:38001')
        string(name: 'DMERestCert', defaultValue: '')
        string(name: 'Console', defaultValue: 'https://console-qa.mobiledgex.net')
        string(name: 'VariableFile', defaultValue: 'automation_variables.py')
        string(name: 'InfluxDB', defaultValue: 'notset')
        string(name: 'OpenStackEnv', defaultValue: 'notset')
        string(name: 'CRMUpgradeVersion', defaultValue: 'notset')
        string(name: 'CommitVersion', defaultValue: 'master')
        booleanParam(name: 'RunFailedOnly', defaultValue: false)
        string(name: 'CRMPool')
        choice(name: 'TestTarget', choices: ['MasterController', 'Controller', 'DME', 'SDK', 'Openstack', 'VCD', 'Vsphere', 'Anthos', 'WebUI', 'Metrics', 'Performance/Security', 'FRM'], description: '')
        string(name: 'NumberParallelExecutions', defaultValue: '1')
        string(name: 'TestTimeout', defaultValue: '60m')
    }

    stages {
        stage('Checkout') {
            options { retry(10) }
            steps {
                //script {
                //    currentBuild.rawBuild.project.description = 'NEW JOB DESCRIPTION'
                //    currentBuild.rawBuild.project.setDisplayName('runTestcases')
                //}

                //sh 'docker system prune -af'  //remove all docker stuff without prompting
                //echo 'docker prune failed. mayber already running'
                // delete old protos before git and build
                //dir('go/src/github.com/mobiledgex') {
                //    sh 'rm -rf *'
                //}

                dir('go/src/github.com/mobiledgex') {
                    sh 'rm -rf *'
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                            [$class:'SparseCheckoutPath', path:'testcases/*'],
                            [$class:'SparseCheckoutPath', path:'jenkins/*'],
                            [$class:'SparseCheckoutPath', path:'modules/*'],
                            [$class:'SparseCheckoutPath', path:'protos/*'],
                            [$class:'SparseCheckoutPath', path:'tools/*'],
                            [$class:'SparseCheckoutPath', path:'certs/*']
                            ]]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                        url: 'https://github.com/mobiledgex/edge-cloud-qa.git']]])

                        //unstash 'edge-cloud_stash'
                }

                dir('go/src/github.com/mobiledgex/edge-cloud-sampleapps') {
                    sh 'rm -rf *'
                   checkout([$class: 'GitSCM',
                       branches: [[name: CommitVersion]],
                       doGenerateSubmoduleConfigurations: false,
                       extensions: [
                           [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                           [$class:'SparseCheckoutPath', path:'ComputerVisionServer/*']
                           ]]
                       ],
                       submoduleCfg: [],
                       userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                       url: 'https://github.com/mobiledgex/edge-cloud-sampleapps.git']]])
                }

                dir('go/src/github.com/mobiledgex/edge-proto') {
                    sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-proto/*'
                    git branch: CommitVersion,
                    credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                    url: 'https://github.com/mobiledgex/edge-proto.git'
                }
                dir('go/src/github.com/mobiledgex/edge-cloud') {
                   sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/*'
    
                   checkout([$class: 'GitSCM',
                       branches: [[name: CommitVersion]],
                       doGenerateSubmoduleConfigurations: false,
                       extensions: [
                           [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                           [$class:'SparseCheckoutPath', path:'edgeproto/*'],
                           [$class:'SparseCheckoutPath', path:'d-match-engine/dme-proto/*'],
                           [$class:'SparseCheckoutPath', path:'protoc-gen-cmd/protocmd/*'],
                           [$class:'SparseCheckoutPath', path:'protogen/*']
                           ]]
                       ],
                       submoduleCfg: [],
                       userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                       url: 'https://github.com/mobiledgex/edge-cloud.git']]])
                }
            }
            post {
                failure { echo 'checkout failed' }
            }
        }

        stage("build protos") {
            steps {
                dir('go/src/github.com/mobiledgex/tools') {
                    script {
                        if(params.SlaveNode == 'jenkinsWindowsSelenium') {
                            echo('slavenode is jenkinsWindowsSelenium. Skipping')
                        } else {
                            sh(script:'/usr/bin/python3 ./build_protos.py --sourcedir $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/ --sourcedir_proto $WORKSPACE/go/src/github.com/mobiledgex/edge-proto/ --qadir $WORKSPACE/go/src/github.com/mobiledgex');
                        }
                    }
                }
            }
            post {
                failure { echo "build_protos.py failed" }
            }
        }
        
        stage("execute tests") {
            steps {
                dir('go/src/github.com/mobiledgex/jenkins') {
                    script {
                        runfailedonly_arg = ""
                        if(String.valueOf(params.RunFailedOnly) == "true") {
                            runfailedonly_arg = "--failed_only"
                        }
                        
                        if(params.SlaveNode == 'jenkinsWindowsSelenium') {
                            sh(script:'export PYTHONPATH=$WORKSPACE\\\\go\\\\src\\\\github.com\\\\mobiledgex\\\\modules;' +
                                      'export PATH=$PATH:$WORKSPACE\\\\go\\\\src\\\\github.com\\\\mobiledgex\\\\tools;' +
                                      'export AUTOMATION_CONSOLE_ADDRESS=' + params.Console + ';' +
                                      'export AUTOMATION_MC_ADDRESS=' + params.MasterController + ';' +
                                      'export AUTOMATION_MC_CERT=;' +
                                      'python ./execJira_parallel.py --test_timeout=' + params.TestTimeout + ' ' + runfailedonly_arg);
                        } else {
                            sh(script:'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;' +
                                      'export PATH=$PATH:$WORKSPACE/go/src/github.com/mobiledgex/tools:/home/jenkins/go/bin' +
                                      ';export AUTOMATION_CONTROLLER_ADDRESS=' + params.Controller + 
                                      ';export AUTOMATION_DME_ADDRESS=' + params.DME + 
                                      ';export AUTOMATION_DME_REST_ADDRESS=' + params.DMERest + 
                                      //';export AUTOMATION_VERSION=' + params.Version + 
                                      ';export AUTOMATION_DME_CERT=' + params.DMERestCert + 
                                      ';export AUTOMATION_OPENSTACK_DEDICATED_ENV=' + params.OpenStackEnv + 
                                      ';export AUTOMATION_OPENSTACK_SHARED_ENV=' + params.OpenStackEnv + 
                                      ';export AUTOMATION_OPENSTACK_VM_ENV=' + params.OpenStackEnv + 
                                      ';export AUTOMATION_OPENSTACK_GPU_ENV=' + params.OpenStackEnv + 
                                      ';export AUTOMATION_OPENSTACK_OFFLINE_ENV=' + params.OpenStackEnv + 
                                      ';export AUTOMATION_MC_ADDRESS=' + params.MasterController + 
                                      ';export AUTOMATION_MC_ADDRESS_FEDERATION=' + params.MasterControllerFederation +
                                      ';export AUTOMATION_MC_PASSWORD=' + params.MasterControllerFederationPassword +
                                      ';export AUTOMATION_MC_CERT=' + 
                                      ';export AUTOMATION_INFLUXDB_ADDRESS=' + params.InfluxDB + 
                                      ';export AUTOMATION_OPENSTACK_VMPOOL_ENV=' + params.OpenStackEnv + 
                                      ';export AUTOMATION_OPENSTACK_VGPU_ENV=' + params.OpenStackEnv + 
                                      ';export AUTOMATION_VERSION=' + params.CRMUpgradeVersion +
                                      ';./execJira_parallel.py --test_timeout=' + params.TestTimeout + ' ' + runfailedonly_arg)
                        }
                    }
                }
            }
            post {
                failure { echo "execJira.py failed for"}
            }
        }
    }

}

