gitcred = '79b116ea-d7ac-4d6c-928d-49b79e5f9bef'
dateValue = 'notset'
cycle = 'notset'
regression_prep_status = true
create_cloudlet_status = true

pipeline{
    agent { label 'jenkinsSlave1' }
    parameters {
        string(name: 'BuildDate', defaultValue: 'today', description: 'YYYY-MM-DD or "today"')
        string(name: 'Project', defaultValue: 'ECQ')
        string(name: 'Version', defaultValue: 'CirrusR3.1')
        string(name: 'MasterController', defaultValue: 'console-qa.mobiledgex.net:443')
        string(name: 'MasterControllerFederation', defaultValue: 'console-dev.mobiledgex.net:443')
        string(name: 'Controller', defaultValue: 'mexplat-qa-us.ctrl.mobiledgex.net:55001')
        string(name: 'DME', defaultValue: 'us-qa.dme.mobiledgex.net:50051')
        string(name: 'DMERest', defaultValue: 'us-qa.dme.mobiledgex.net:38001')
        string(name: 'DMERestCert', defaultValue: '')
        string(name: 'Console', defaultValue: 'https://console-qa.mobiledgex.net')
        string(name: 'CRMPoolOpenstack', defaultValue: '{"cloudlet_name_crm":[{"cloudlet":"automationBonnCloudlet","operator":"TDG","region":"US"},{"cloudlet":"packet-qaregression","operator":"packet","region":"US"}]}')
        string(name: 'CRMPoolAnthos', defaultValue: '{"cloudlet_name_crm":[{"cloudlet":"qa-anthos","operator":"packet","region":"US"}]}')
        string(name: 'CRMPoolVCD', defaultValue: '{"cloudlet_name_crm":[{"cloudlet":"automationDallasCloudlet","operator":"packet","region":"US"}]}')
        string(name: 'CRMPoolVsphere', defaultValue: '{"cloudlet_name_crm":[{"cloudlet":"DFWVMW2","operator":"packet","region":"US"}]}')
        string(name: 'NumberParallelExecutionsOpenstack', defaultValue: '2')
        string(name: 'NumberParallelExecutionsAnthos', defaultValue: '2')
        string(name: 'NumberParallelExecutionsVCD', defaultValue: '2')
        string(name: 'NumberParallelExecutionsVsphere', defaultValue: '2')
        string(name: 'VariableFile', defaultValue: 'automation_variables.py')
        string(name: 'InfluxDB', defaultValue: 'notset')
        string(name: 'OpenStackEnv', defaultValue: 'notset')
        string(name: 'CommitVersion', defaultValue: 'master')
        booleanParam(name: 'RunFailedOnly', defaultValue: false)
        string(name: 'SlaveNodeSDK', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeDME', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeController', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeMasterController', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeScans', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeOpenstack', defaultValue: 'jenkinsGcpSlave1')
        string(name: 'SlaveNodeVCD', defaultValue: 'jenkinsGcpSlave2')
        string(name: 'SlaveNodeVsphere', defaultValue: 'jenkinsSlave2')
        string(name: 'SlaveNodeAnthos', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeConsole', defaultValue: 'jenkinsWindowsSelenium')
        string(name: 'SlaveNodeMetrics', defaultValue: 'jenkinsSlave1')
        //choice(name: 'Platform', choices: ['SDK', 'Controller', 'DME', 'Openstack', 'VCD', 'Vshpere', 'Anthos'], description: '')
        //string(name: 'Area', defaultValue: 'flavor')
    }

    stages {
        stage('Regression Prep 1') {
            parallel {
                stage('Check Load/Create Cycle') {
                    steps {
                        script {
                            dateValue = determineDateValue()
                            cycle = dateValue + '_' + params.Version
                            currentBuild.displayName = cycle
                            slackMessage.good('Starting regression for ' + cycle)
                            checkLoadExists(dateValue)
                            createCycle(cycle)
                            addTestsToFolder(params.Version, params.Project, cycle)
                        }
                    }
                }
                stage('Cleanup Provisioning') {
                    steps{
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'cleanup provisioning failed') {
                            build job: 'cleanupAutomationProvisioning'
                            script {
                                defragEtcd()
                            }
                        }
                    }
                }
            }
            post {
                failure {
                    script {
                        slackMessage.fail("Load check failed or create cycle failed for " + dateValue + '. Aborting')
                    }
                }
            }
        }

        stage('Regression Prep 2') {
            parallel {
                stage('Deploy Chef') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'deploy chef failed') {
                            script { deployChef(dateValue) }
                        }
                    }
                }

                stage('Pull Image') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'pull image failed') {
                            script { pullImage(dateValue) }
                        }
                    }
                }

                stage('Delete Openstack') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'delete openstack failed') {
                            script { deleteCrm.openstack(cycle) }
                        }
                    }
                }
                stage('Delete Anthos') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'delete anthos failed') {
                            script { deleteCrm.anthos(cycle) }
                        }
                    }
                }
                stage('Delete Fake') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'delete fake failed') {
                            script { deleteCrm.fake(cycle) }
                        }
                    }
                }
            }
            post {
                failure {
                    script { 
                        currentBuild.result = 'SUCCESS'
                        echo "SSSUUUUCCCCEEEESSS"
                        regression_prep_status = false
                    }
                }
                success {
                    script { slackMessage.good('Regression Prep successfull') }
                }
            }
        }

        stage('Regression Prep Check') {
            steps {
                script {
                    if(regression_prep_status == false) {
                        slackMessage.fail('Regression Prep Failed. Waiting for input')
                        input message: 'Regression Prep failed. Continue?'
                        slackMessage.good('Regression proceeding')
                        currentBuild.result = 'SUCCESS'
                        echo "SSSUUUUCCCCEEEESSS22222"
                    }
                }
            }
        }   
        
        stage('Deploy backend in K8s') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'deploy failed') {
                    script {
                        slackMessage.good('Deploying backend')
                        deployEdgeCloud(dateValue)
                    }
                }
            }
            post {
                failure { 
                    script {
                        slackMessage.warning('Deploy failed for ' + dateValue + '. Requesting input to continue') 
                        input message: 'Deploy failed for ' + dateValue + ' Continue regression anyway?'
                        slackMessage.good('Regression proceeding for ' + dateValue)
                    }
                }
                success {
                    script { slackMessage.good('Deploy successfull for ' + dateValue) }
                }
            }
        }
        
        stage('Create/Upgrade CRMs') {
            parallel {
                stage('Create Openstack') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'create openstack failed') {
                            script { createUpgradeCrm.openstack(cycle) }
                        }
                    }
                }
                stage('Create Anthos') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'create anthos failed') {
                            script { createUpgradeCrm.anthos(cycle) }
                        }
                    }
                }
                stage('Create Fake') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'create fake failed') {
                            script { createUpgradeCrm.fake(cycle) }
                        }
                    }
                }
                
                stage('Upgrade Cloudlets') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'upgrade cloudlets failed') {
                            script { createUpgradeCrm.upgrade(cycle, dateValue) }
                        }
                    }
                }
            }
            post {
                failure {
                    script { 
                        currentBuild.result = 'SUCCESS'
                        echo "SSSUUUUCCCCEEEESSS"
                        create_cloudlet_status = false
                    }
                }
                success {
                    script { slackMessage.good('Create/Upgrade CRM successfull') }
                }
            }

        }

        stage('Create/Upgrade CRM Check') {
            steps {
                script {
                    if(create_cloudlet_status == false) {
                        slackMessage.fail('Create/Upgrade CRM Failed. Waiting for input')
                        input message: 'Create/Upgrade CRM failed. Continue?'
                        slackMessage.good('Regression proceeding')
                        currentBuild.result = 'SUCCESS'
                        echo "SSSUUUUCCCCEEEESSS33333"
                    }
                }
            }
        }        

        stage("execute parallel tests") {
            parallel {
                stage('SDK Tests') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'SDK tests failed') {
                            script { slackMessage.good('Starting SDK tests') }
                            build job: 'runSdkTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNodeSDK), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'TestTarget', value: 'SDK'),
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run SDK tests failed"
                                slackMessage.fail('Finished SDK tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run SDK tests passed"
                                slackMessage.good('Finished SDK tests with pass')
                            }
                        }
                    }
                }
                stage('DME Tests') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'DME tests failed') {
                            script { slackMessage.good('Starting DME tests') }
                            build job: 'runDmeTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNodeDME), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'Controller', value: params.Controller), 
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'DME', value: params.DME),
                                string(name: 'DMERest', value: params.DMERest),
                                string(name: 'DMERestCert', value: params.DMERestCert),
                                string(name: 'TestTarget', value: 'DME'),
                                string(name: 'VariableFile', value: params.VariableFile), 
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run DNE tests failed"
                                slackMessage.fail('Finished DME tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run DME tests passed"
                                slackMessage.good('Finished DME tests with pass')
                            }
                        }
                    }
                }
                stage('Controller Tests') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Controller tests failed') {
                            script { slackMessage.good('Starting Controller Tests') }
                            build job: 'runControllerTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNodeController), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'Controller', value: params.Controller), 
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'DME', value: params.DME),
                                string(name: 'DMERest', value: params.DMERest),
                                string(name: 'DMERestCert', value: params.DMERestCert),
                                string(name: 'TestTarget', value: 'Controller'),
                                string(name: 'VariableFile', value: params.VariableFile), 
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run Controller tests failed"
                                slackMessage.fail('Finished Controller tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run Controller tests passed"
                                slackMessage.good('Finished Controller tests with pass')
                            }
                        }
                    }
                }
              
                stage('MasterController Tests') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'MC tests failed') {
                            script { slackMessage.good('Starting MasterController tests') }
                            build job: 'runMcTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNodeMasterController), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'TestTarget', value: 'MasterController'),
                                string(name: 'VariableFile', value: params.VariableFile), 
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run MasterController tests failed"
                                slackMessage.fail('Finished MasterController tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run MasterController tests passed"
                                slackMessage.good('Finished MasterController tests with pass')
                            }
                        }
                    }
                }
  
                stage('Anthos Tests') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Anthos tests failed') {
                            script { slackMessage.good('Starting Anthos tests') }
                            build job: 'runCrmTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNodeAnthos), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'Controller', value: params.Controller), 
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'DME', value: params.DME),
                                string(name: 'DMERest', value: params.DMERest),
                                string(name: 'DMERestCert', value: params.DMERestCert),
                                string(name: 'TestTarget', value: 'Anthos'),
                                string(name: 'VariableFile', value: params.VariableFile), 
                                string(name: 'CRMPool', value: params.CRMPoolAnthos),
                                string(name: 'NumberParallelExecutions', value: params.NumberParallelExecutionsAnthos),
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run Anthos tests failed"
                                slackMessage.fail('Finished Anthos tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run Anthos tests passed"
                                slackMessage.good('Finished Anthos tests with pass')
                            }
                        }
                    }
                }
              
                stage('Vsphere Tests') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Vsphere tests failed') {
                            script { slackMessage.good('Starting Vsphere tests') }
                            build job: 'runCrmTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNodeVsphere), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'Controller', value: params.Controller), 
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'DME', value: params.DME),
                                string(name: 'DMERest', value: params.DMERest),
                                string(name: 'DMERestCert', value: params.DMERestCert),
                                string(name: 'TestTarget', value: 'Vsphere'),
                                string(name: 'VariableFile', value: params.VariableFile), 
                                string(name: 'CRMPool', value: params.CRMPoolVsphere),
                                string(name: 'NumberParallelExecutions', value: params.NumberParallelExecutionsVsphere),
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run Vsphere tests failed"
                                slackMessage.fail('Finished Vsphere tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run Vsphere tests passed"
                                slackMessage.good('Finished Vsphere tests with pass')
                            }
                        }
                    }
                }
                stage('VCD Tests') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'VCD tests failed') {
                            script { slackMessage.good('Starting VCD tests') }
                            build job: 'runCrmTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNodeVCD), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'Controller', value: params.Controller), 
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'DME', value: params.DME),
                                string(name: 'DMERest', value: params.DMERest),
                                string(name: 'DMERestCert', value: params.DMERestCert),
                                string(name: 'TestTarget', value: 'VCD'),
                                string(name: 'VariableFile', value: params.VariableFile), 
                                string(name: 'CRMPool', value: params.CRMPoolVCD),
                                string(name: 'NumberParallelExecutions', value: params.NumberParallelExecutionsVCD),
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run VCD tests failed"
                                slackMessage.fail('Finished VCD tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run VCD tests passed"
                                slackMessage.good('Finished VCD tests with pass')
                            }
                        }
                    }
                }
                stage('Openstack Tests') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Openstack tests failed') {
                            script { slackMessage.good('Starting Openstack tests') }
                            build job: 'runCrmTestcases', parameters: [
                                string(name: 'SlaveNode', value: params.SlaveNodeOpenstack), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'Controller', value: params.Controller), 
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'DME', value: params.DME),
                                string(name: 'DMERest', value: params.DMERest),
                                string(name: 'DMERestCert', value: params.DMERestCert),
                                string(name: 'TestTarget', value: 'Openstack'),
                                string(name: 'VariableFile', value: params.VariableFile), 
                                string(name: 'CRMPool', value: params.CRMPoolOpenstack),
                                string(name: 'NumberParallelExecutions', value: params.NumberParallelExecutionsOpenstack),
                                booleanParam(name: 'RunFailedOnly', value: params.RunFailedOnly)]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run Openstack tests failed"
                                slackMessage.fail('Finished Openstack tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run Openstack tests passed"
                                slackMessage.good('Finished Openstack tests with pass')
                            }
                        }
                    }
                }
                stage('Scans') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Scans failed') {
                            script { slackMessage.good('Starting scan tests') }
                            build job: 'runScans', parameters: [
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'SlaveNode', value: params.SlaveNodeScans)
                                ]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run scan tests failed"
                                slackMessage.fail('Finished scan tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run scan tests passed"
                                slackMessage.good('Finished scan tests with pass')
                            }
                        }
                    }
                }
                
                stage('Console') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Console tests failed') {
                        script { slackMessage.good('Starting Console tests') }
                            build job: 'runConsoleTestcases', parameters: [
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Console', value: params.Console),
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'TestTarget', value: 'WebUI'),
                                string(name: 'SlaveNode', value: params.SlaveNodeConsole)
                                ]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run console tests failed"
                                slackMessage.fail('Finished Console tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run console tests passed"
                                slackMessage.good('Finished Console tests with pass')
                            }
                        }
                    }
                }
                
                stage('Metrics') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Metrics tests failed') {
                            script { slackMessage.good('Starting Metrics tests') }
                            build job: 'runMetricsTestcases', parameters: [
                                string(name: 'Cycle', value: cycle), 
                                string(name: 'Project', value: params.Project), 
                                string(name: 'Console', value: params.Console),
                                string(name: 'MasterController', value: params.MasterController),
                                string(name: 'TestTarget', value: 'Metrics'),
                                string(name: 'SlaveNode', value: params.SlaveNodeMetrics)
                                ]
                        }
                    }
                    post {
                        failure {
                            script {
                                echo "run console tests failed"
                                slackMessage.fail('Finished Console tests with failures')
                            }
                        }
                        success {
                            script {
                                echo "run console tests passed"
                                slackMessage.good('Finished Console tests with pass')
                            }
                        }
                    }
                }
            }
        }
        stage("Password Tests") {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Password tests failed') {
                        script { slackMessage.good('Starting Password tests') }
                        build job: 'runTestcases', parameters: [
                            string(name: 'Project', value: params.Project), 
                            string(name: 'Version', value: params.Version), 
                            string(name: 'Cycle', value: cycle), 
                            string(name: 'MasterController', value: params.MasterController),
                            string(name: 'TestTarget', value: 'MasterController'),
                            string(name: 'Components', value: 'Automated, Password')]
                    }
                }
            }
            post {
                failure {
                    script {
                        echo "run password tests failed"
                        slackMessage.fail('Finished Password tests with failures')
                    }
                }
                success {
                    script {
                        echo "run password tests passed"
                        slackMessage.good('Finished Password tests with pass')
                    }
                }
            }
        }
        
        stage("Performance Tests") {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Performance tests failed') {
                        script { slackMessage.good('Starting Performance tests') }
                        build job: 'runTestcases', parameters: [
                            string(name: 'Project', value: params.Project), 
                            string(name: 'Version', value: params.Version), 
                            string(name: 'Cycle', value: cycle), 
                            string(name: 'MasterController', value: params.MasterController),
                            string(name: 'TestTarget', value: 'Performance/Security'),
                            string(name: 'Components', value: 'Automated, Performance')]
                    }
                }
            }
            post {
                always {
                    dir('go/src/github.com/mobiledgex/jenkins') {
                        sh('export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./updateCycleJira.py  --project ' + params.Project + ' --version ' + params.Version + ' --cycle ' + cycle + ' --enddate')
                    }
                    script {
                        script { slackMessage.good('Creating Report') }
                        job_duration = System.currentTimeMillis() - currentBuild.startTimeInMillis
                        job_duration_string = job_duration.toString()
                        build job: 'createReport', parameters: [
                            string(name: 'Project', value: params.Project), 
                            string(name: 'Version', value: params.Version), 
                            string(name: 'Cycle', value: cycle), 
                            string(name: 'JobDuration', value: job_duration_string)]
                    }  
                }
            }
        }
    }
}
