gitcred = '79b116ea-d7ac-4d6c-928d-49b79e5f9bef'
dateValue = 'notset'
cycle = 'notset'
regression_prep_status = null
deploy_status = false
create_cloudlet_status = false
execute_tests = false

pipeline{
    agent { label 'jenkinsSlave1' }
    parameters {
        string(name: 'BuildDate', defaultValue: 'today', description: 'YYYY-MM-DD or "today"')
        string(name: 'Project', defaultValue: 'ECQ')
        string(name: 'Version', defaultValue: 'CirrusR3.1')
        string(name: 'MasterController', defaultValue: 'console-qa.mobiledgex.net:443')
        string(name: 'MasterControllerFederation', defaultValue: 'console-dev.mobiledgex.net:443')
        string(name: 'MasterControllerFederationPassword', defaultValue: 'mexadmin123')
        string(name: 'Controller', defaultValue: 'mexplat-qa-us.ctrl.mobiledgex.net:55001')
        string(name: 'DME', defaultValue: 'us-qa.dme.mobiledgex.net:50051')
        string(name: 'DMERest', defaultValue: 'us-qa.dme.mobiledgex.net:38001')
        string(name: 'DMERestCert', defaultValue: '')
        string(name: 'Console', defaultValue: 'https://console-qa.mobiledgex.net')
        string(name: 'CRMPoolOpenstack', defaultValue: '{"cloudlet_name_crm":[{"cloudlet":"automationBonnCloudlet","operator":"TDG","region":"US","physical_name":"bonn"},{"cloudlet":"packet-qaregression","operator":"packet","region":"US","physical_name":"packet2"}]}')
        string(name: 'CRMPoolAnthos', defaultValue: '{"cloudlet_name_crm":[{"cloudlet":"qa-anthos","operator":"packet","region":"US","physical_name":"qa-anthos"}]}')
        string(name: 'CRMPoolVCD', defaultValue: '{"cloudlet_name_crm":[{"cloudlet":"automationDallasCloudlet","operator":"packet","region":"US","physical_name":"qa2-lab"}]}')
        string(name: 'CRMPoolVsphere', defaultValue: '{"cloudlet_name_crm":[{"cloudlet":"DFWVMW2","operator":"packet","region":"US","physical_name":"dfw2"}]}')
        string(name: 'NumberParallelExecutionsOpenstack', defaultValue: '2')
        string(name: 'NumberParallelExecutionsAnthos', defaultValue: '2')
        string(name: 'NumberParallelExecutionsVCD', defaultValue: '2')
        string(name: 'NumberParallelExecutionsVsphere', defaultValue: '2')
        string(name: 'VariableFile', defaultValue: 'automation_variables.py')
        string(name: 'InfluxDB', defaultValue: 'notset')
        string(name: 'OpenStackEnv', defaultValue: 'notset')
        string(name: 'CommitVersion', defaultValue: 'master')
        booleanParam(name: 'RunFailedOnly', defaultValue: false)
        string(name: 'SlaveNodeSDK', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeDME', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeController', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeMasterController', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeScans', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeOpenstack', defaultValue: 'jenkinsGcpSlave1')
        string(name: 'SlaveNodeVCD', defaultValue: 'jenkinsGcpSlave2')
        string(name: 'SlaveNodeVsphere', defaultValue: 'jenkinsSlave2')
        string(name: 'SlaveNodeAnthos', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeConsole', defaultValue: 'jenkinsWindowsSelenium')
        string(name: 'SlaveNodeMetrics', defaultValue: 'jenkinsSlave1')
        string(name: 'SlaveNodeFRM', defaultValue: 'jenkinsSlave1')
        string(name: 'TestTimeoutSDK', defaultValue: '5m')
        string(name: 'TestTimeoutController', defaultValue: '4m')
        string(name: 'TestTimeoutMasterController', defaultValue: '4m')
        string(name: 'TestTimeoutDME', defaultValue: '2m')
        string(name: 'TestTimeoutFRM', defaultValue: '2m')
        booleanParam(name: 'RunDeploy', defaultValue: true)
        booleanParam(name: 'RunControllerTests', defaultValue: true)
        booleanParam(name: 'RunMCTests', defaultValue: true)
        booleanParam(name: 'RunDMETests', defaultValue: true)
        booleanParam(name: 'RunSDKTests', defaultValue: true)
        booleanParam(name: 'RunOpenstackTests', defaultValue: true)
        booleanParam(name: 'RunVCDTests', defaultValue: true)
        booleanParam(name: 'RunVsphereTests', defaultValue: true)
        booleanParam(name: 'RunAnthosTests', defaultValue: true)
        booleanParam(name: 'RunMetricsTests', defaultValue: true)
        booleanParam(name: 'RunFRMTests', defaultValue: true)
        booleanParam(name: 'RunScanTests', defaultValue: true)
        booleanParam(name: 'RunConsoleTests', defaultValue: true)
        booleanParam(name: 'RunPerformanceTests', defaultValue: true)
        booleanParam(name: 'RunFailedTests', defaultValue: true)
        booleanParam(name: 'RunReport', defaultValue: true)
    }

    stages {
        stage('Check Load Exists') {
            steps {
                script {
                    dateValue = determineDateValue()
                    cycle = dateValue + '_' + params.Version
                    currentBuild.displayName = cycle
                    slackMessage.good('Starting regression for ' + cycle)
                    checkLoadExists(dateValue)
                }
            }
            post {
                failure {
                    script {
                       slackMessage.fail('Load ' + dateValue + ' does not exist. Aborting')
                    }
                }
            }
        }

        stage('Regression Prep 1') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'regression prep 1 failed') {
                    script {
                        regressionPrep.regressionPrep1(dateValue, cycle)
                     }
                }
            }
            post {
                failure {
                    script {
                       println('regression 1 prep failed. setting regression_prep_status to false')
                       regression_prep_status = false
                    }
                }
                success {
                    script {
                        regression_prep_status = true
                    }
                }
            }
        }

        // regressionprep needs to be split since some things rely on cycle existing
        stage('Regression Prep 2') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'regression prep 2 failed') {
                    script {
                        regressionPrep.regressionPrep2(dateValue, cycle)
                    }
                }
            }
            post {
                failure {
                    script {
                       println('regression 2 prep failed. setting regression_prep_status to false')
                       regression_prep_status = false
                    }
                }
                success {
                    script {
                        if (regression_prep_status != false) { regression_prep_status = true }
                    }
                }
            }
        }

        // this is required for the input step to work correctly. Seems to need to be in its own stage
        stage('Regression Prep Check') {
            steps {
                script {
                    regressionPrep.regressionPrepCheck(regression_prep_status)
                }
            }
        }

        stage('Deploy backend in K8s') {
            when { expression { params.RunDeploy == true } }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'deploy failed') {
                    script {
                        slackMessage.good('Deploying backend')
                        deployEdgeCloud(dateValue)
                        //println('deployEdgeCloud')
                        deploy_status = true
                    }
                }
            }
            post {
                always { 
                    script {
                        if (deploy_status == false) {
                            slackMessage.warning('Deploy failed for ' + dateValue + '. Waiting for input') 
                            input message: 'Deploy failed for ' + dateValue + ' Continue regression anyway?'
                            slackMessage.good('Regression proceeding')
                        } else {
                            slackMessage.good('Deploy successfull')
                        }
                    }
                }
            }
        }
        
        stage('Create/Upgrade CRMs') {
            when { expression { params.RunDeploy == true } }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'create crm failed') {
                    script {
                        createUpgradeCrm.createUpgrade(cycle, dateValue)
                        create_cloudlet_status = true
                    }
                }
            }
        }

        // this is required for the input step to work correctly. Seems to need to be in its own stage
        stage('Create/Upgrade CRM Check') {
            when { expression { params.RunDeploy == true } }
            steps {
                script {
                    createUpgradeCrm.createUpgradeCheck(create_cloudlet_status)
                }
            }
        }

        stage("execute parallel tests") {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'execute parallel tests failed') {
                    script {
                        execute_tests = true
                        executeParallelTests(cycle)
                    }
                }
            }
        }

        stage("Password Tests") {
            when { expression { params.RunMCTests == true } }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Password tests failed') {
                        script { slackMessage.good('Starting Password tests') }
                        build job: 'runTestcases', parameters: [
                            string(name: 'Project', value: params.Project), 
                            string(name: 'Version', value: params.Version), 
                            string(name: 'Cycle', value: cycle), 
                            string(name: 'MasterController', value: params.MasterController),
                            string(name: 'TestTarget', value: 'MasterController'),
                            string(name: 'Components', value: 'Automated, Password')]
                    }
                }
            }
            post {
                failure {
                    script {
                        echo "run password tests failed"
                        slackMessage.fail('Finished Password tests with failures')
                    }
                }
                success {
                    script {
                        echo "run password tests passed"
                        slackMessage.good('Finished Password tests with pass')
                    }
                }
            }
        }

        stage('Rerun Failed Tests') {
            when { expression { params.RunFailedTests == true } }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Rerun Failed tests failed') {
                    script { 
                        slackMessage.good('Starting Rerun Failed tests')
                        runFailedTests(cycle)
                    }
                }
            }
            post {
                failure {
                    script {
                        echo "rerun tests tests failed"
                        slackMessage.fail('Finished Rerun tests with failures')
                    }
                }
                success {
                    script {
                        echo "rerun tests passed"
                        slackMessage.good('Finished Rerun tests with pass')
                    }
                }
            }
        }

        stage("Performance Tests") {
            when { expression { params.RunPerformanceTests == true } }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Performance tests failed') {
                        script { slackMessage.good('Starting Performance tests') }
                        build job: 'Performance'
//                        build job: 'runTestcases', parameters: [
//                            string(name: 'Project', value: params.Project), 
//                            string(name: 'Version', value: params.Version), 
//                            string(name: 'Cycle', value: cycle), 
//                            string(name: 'MasterController', value: params.MasterController),
//                            string(name: 'TestTarget', value: 'Performance/Security'),
//                            string(name: 'Components', value: 'Automated, Performance')]
                    }
                }
            }
//            post {
//                always {
//                    dir('go/src/github.com/mobiledgex/jenkins') {
//                        sh('export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./updateCycleJira.py  --project ' + params.Project + ' --version ' + params.Version + ' --cycle ' + cycle + ' --enddate')
//                    }
//                    script {
//                        script { slackMessage.good('Creating Report') }
//                        job_duration = System.currentTimeMillis() - currentBuild.startTimeInMillis
//                        job_duration_string = job_duration.toString()
//                        build job: 'createReport', parameters: [
//                            string(name: 'Project', value: params.Project), 
//                            string(name: 'Version', value: params.Version), 
//                            string(name: 'Cycle', value: cycle), 
//                            string(name: 'JobDuration', value: job_duration_string)]
//                    }  
//                }
//            }
        }
        stage("Run Report") {
            when { expression { params.RunReport == true && execute_tests == true} }
            steps {
                dir('go/src/github.com/mobiledgex/jenkins') {
                    sh('export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./updateCycleJira.py  --project ' + params.Project + ' --version ' + params.Version + ' --cycle ' + cycle + ' --enddate')
                }
                script {
                    slackMessage.good('Creating Report') 
                    job_duration = System.currentTimeMillis() - currentBuild.startTimeInMillis
                    job_duration_string = job_duration.toString()
                    build job: 'createReport', parameters: [
                        string(name: 'Project', value: params.Project),
                        string(name: 'Version', value: params.Version),
                        string(name: 'Cycle', value: cycle),
                        string(name: 'JobDuration', value: job_duration_string)]
                }
            }
        }
    }
}
