import java.text.SimpleDateFormat

cycle = "${cycle}"
//components = "${components}"
controller = "${controller}"
dme = "dmeunset"
commit_version = "${CommitVersion}"

if (env.dme) {
    dme = "${DME}"
}
echo dme
echo cycle
echo controller

currentBuild.displayName = cycle

node('jenkinsGcpSlave1'){
    stage('Checkout') {
       dir('go/src/github.com/mobiledgex/edge-cloud-sampleapps') {
          git branch: 'master',
          credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
          url: 'https://github.com/mobiledgex/edge-cloud-sampleapps.git'
       }
        dir('go/src/github.com/mobiledgex') {
            checkout([$class: 'GitSCM', 
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'testcases/*'],
                        [$class:'SparseCheckoutPath', path:'testcases/*'],
                        [$class:'SparseCheckoutPath', path:'jenkins/*'],
                        [$class:'SparseCheckoutPath', path:'modules/*'],
                        [$class:'SparseCheckoutPath', path:'protos/*'],
                        [$class:'SparseCheckoutPath', path:'tools/*'],
                        [$class:'SparseCheckoutPath', path:'certs/*']
                    ]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud-qa.git']]])
        }

        dir('go/src/github.com/mobiledgex/edge-cloud') {
           sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/*'
        }
        dir('go/src/github.com/mobiledgex/edge-proto') {
           sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-proto/*'
        }

        dir('go/src/github.com/mobiledgex/edge-cloud') {
            checkout([$class: 'GitSCM',
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'edgeproto/*'],
                        [$class:'SparseCheckoutPath', path:'d-match-engine/dme-proto/*'],
                        [$class:'SparseCheckoutPath', path:'protoc-gen-cmd/protocmd/*'],
                        [$class:'SparseCheckoutPath', path:'protogen/*']
                    ]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud.git']]])
        }

        dir('go/src/github.com/mobiledgex/edge-cloud') {
           def t = 'git reset --hard ' + commit_version
           def tout  = sh(script: t, returnStdout: true);
        }
        dir('go/src/github.com/mobiledgex/edge-proto') {
           git branch: 'master',
           credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
           url: 'https://github.com/mobiledgex/edge-proto.git'
        }

    }

    stage('make app') {
       date = new Date()
       sdate = new SimpleDateFormat("yyyMMdd")
       tag = Version + '_automation_' + sdate.format(date)

       dir('go/src/github.com/mobiledgex/edge-cloud-sampleapps/FaceDetectionServer') {
              sh 'cat ~/docker_password.txt | docker login docker.mobiledgex.net --username mobiledgex --password-stdin;make TAG=' + tag
       }
    }

    stage("build protos") {
      dir('go/src/github.com/mobiledgex/tools') {
         status = sh(script:'/usr/bin/python3 ./build_protos.py --sourcedir $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/ --sourcedir_proto $WORKSPACE/go/src/github.com/mobiledgex/edge-proto/--qadir $WORKSPACE/go/src/github.com/mobiledgex', returnStatus: true);
         println status
         if(status != 0) {
            echo "build_protos.py failed with statuscode=" + status
            currentBuild.result = 'FAILURE'
         }
      }

    }

    stage("execute tests") {
      dir('go/src/github.com/mobiledgex/jenkins') {
         status = sh(script:'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;export PATH=$PATH:$WORKSPACE/go/src/github.com/mobiledgex/tools:/home/jenkins/go/bin;export AUTOMATION_CONTROLLER_ADDRESS=' + controller + ';export AUTOMATION_DME_ADDRESS=' + dme + ';./execJira.py', returnStatus: true);
         println status
         if(status != 0) {
            echo "execJira.py failed with statuscode=" + status
            currentBuild.result = 'FAILURE'
         }
      }

    }
}
