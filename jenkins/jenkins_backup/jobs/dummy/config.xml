<?xml version='1.1' encoding='UTF-8'?>
<!--
 Copyright 2022 MobiledgeX, Inc

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<flow-definition plugin="workflow-job@2.42">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.6"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.27.1">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VersionToDeploy</name>
          <description>YYYY-MM-DD or &apos;today&apos;</description>
          <defaultValue>today</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Component</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Console</string>
              <string>Everything</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Project</name>
          <defaultValue>ECQ</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2633.v6baeedc13805">
    <script>regression_prep_status = true

pipeline{
    agent { label &apos;jenkinsSlave1&apos; }

    stages {
        stage(&apos;Run Failed Tests&apos;) {
            steps {
                script {
                    catchError(buildResult: &apos;SUCCESS&apos;, stageResult: &apos;FAILURE&apos;, message: &apos;deploy failed&apos;) {
                        def dateValue = &quot;2022-02-12&quot;
                        def cycle = dateValue + &apos;_&apos; + &apos;CirrusR3.1&apos;
                        checkLoadExists(dateValue)
                        println(&quot;cbr0 ${currentBuild.result}&quot;)
                        regressionPrep.regressionPrep1(dateValue, cycle)
                        println(&quot;cbrafterprep ${currentBuild.result}&quot;)

                        //def s = &apos;curl -s https://robot\\$qa:RIuSwsdA9naFkunkDtg7TrPOHG3YoqS8@harbor.mobiledgex.net/v2/mobiledgex/edge-cloud/tags/list | jq &quot;.tags | index(\\&quot;&apos; + dateValue + &apos;\\&quot;)&quot;&apos;
                        //def index  = sh(script: s, returnStdout: true);
                        //println index.getClass() 
                        //println &quot;xxxx${index}x&quot;
                        //if(index.trim() == &quot;nul&quot;) {
                        //    println &quot;${s} failed&quot;
                        //    currentBuild.result = &apos;FAILURE&apos;
                        //} else {
                        //    println &quot;load ${dateValue} found&quot;
                        //    error(&apos;x&apos;)
                    //    }
                    }
}
                //runFailedTests(&apos;2022-02-03-1_CirrusR3.1&apos;)
                //def export_vars = &apos;export GITHUB_USER=andya072071;export GITHUB_TOKEN=16a8cf8e79fad4a98bba2e59544d8faf78fca71d;export VAULT_ROLE_ID=&quot;22c16b60-1ac5-4a32-cc07-05037475a717&quot;;export VAULT_SECRET_ID=&quot;67c96872-878e-9442-4440-ff76ce65cea5&quot;;export VAULT_ADDR=https://vault-qa.mobiledgex.net;&apos;
                //sh &apos;export GITHUB_USER=andya072071;export GITHUB_TOKEN=16a8cf8e79fad4a98bba2e59544d8faf78fca71d;export VAULT_ROLE_ID=&quot;22c16b60-1ac5-4a32-cc07-05037475a717&quot;;export VAULT_SECRET_ID=&quot;67c96872-878e-9442-4440-ff76ce65cea5&quot;;export VAULT_ADDR=https://vault-qa.mobiledgex.net&apos;
                //sh &apos;echo $GITHUB_TOKEN&apos;
                //def kubectl_setup = export_vars + &apos;vault login -method=github token=&quot;$GITHUB_TOKEN&quot;;vault kv get -field=value secret/ansible/common/kubeconfigs/us | base64 --decode &gt;$HOME/kubeconfig.qa-us;export KUBECONFIG=$HOME/kubeconfig.qa-us;kubectl config use-context teleport.mobiledgex.net;&apos;
                //sh kubectl_setup + &apos;kubectl patch service monitoring-influxdb --type=json -p \&apos;[{&quot;op&quot;:&quot;add&quot;, &quot;path&quot;:&quot;/spec/loadBalancerSourceRanges/-&quot;, &quot;value&quot;:&quot;\&apos;70.114.97.80\&apos;/32&quot;}]\&apos;&apos;  // andy
            }
            post {
                failure {
                    script {
                        println(&quot;cbrpostfailure ${currentBuild.result}&quot;)
                        //input message: &apos;xDeploy failed for continue regression anyway?&apos;
                        echo &apos;continuing&apos;
                        //currentBuild.result = &apos;SUCCESS&apos;
                    }
                }
                success {
                    println(&quot;cbrpostsuccess ${currentBuild.result}&quot;)
                    echo &apos;stage successful&apos;
                }
            }
        }
        stage(&apos;Regression Prep Check&apos;) {
            steps {
                script {
                    regressionPrep.regressionPrepCheck(regression_prep_status)
                }
            }
        }

        stage(&apos;proceed&apos;) {
            steps {
                script{
                    input message: &apos;xDeploy failed for continue regression anyway?&apos;
                    echo &apos;proceed&apos;
                }
            }
        }
    }
}

    
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>