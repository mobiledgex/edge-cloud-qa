project = "${project}"
version = "${version}"
cycle = "${cycle}"
controller = "${controller}"
controllerazuregcp = "${controllerazuregcp}"
mastercontroller = "${mastercontroller}"
dme = "${dme}"
dmeazuregcp = "${dmeazuregcp}"
commit_version = "${CommitVersion}"
dmerest = "${dmerest}"
dmerestcert = "${dmerestcert}"
// the current number of tests to run in vcd and vsphere have been set to 1 until a stable number can be determined and will be modifed below and are used in jobList1Platform
number_parallel_executionsOpenstack = '6'
number_parallel_executionsVsphere = '1'
number_parallel_executionsVCD = '1'

//jobName = "${components}"

currentBuild.displayName = cycle

//def jobList1Parallel = ["runCrmOpenstackTests", "runCrmAzureTests", "runCrmGcpTests", "runRunCommandTests"]
def jobList1Parallel = ["runCrmOpenstackSharedTests", "runCrmOpenstackDedicatedTests", "runCrmOpenstackGpuTests", "runCrmOpenstackVmTests", "runCrmRunDebugTests", "runCrmVMPoolTests", "runCrmAutoProvTests", "runCrmAccessCloudletTests", "runCrmAlertReceiverTests"]
def jobList1Parallelgcpazure = ["runCrmAzureTests", "runCrmGcpTests"]
def jobListMaintenance = ["runCloudletMaintenanceCRMTests"]
def jobList1Platform = ["runCrmRunCommandTests", "runCrmShowLogsTests"]
def platform_list = ["Openstack", "VCD", "Vsphere"] 
//def jobList2Parallel = ["runGetFqdnListTests","runGetAppInstListTests"]
 
builds1 = [:]
//builds2 = [:]

node('jenkinsSlave1'){
    stage('Checkout') {
        dir('go/src/github.com/mobiledgex') {
            checkout([$class: 'GitSCM', 
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'modules/*'],
                        [$class:'SparseCheckoutPath', path:'jenkins/*']
                    ]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud-qa.git']]])
        }

    }


   //if(currentBuild.result != 'FAILURE') {
   //   stage("copy tests to ${cycle}") {
   //       dir('go/src/github.com/mobiledgex/jenkins') {
   //           //String j = jobListAll.join(" ")
   //           //def p = pwd()
   //           def status = -1
   //           //def s = p + '@script/copyTestsToRelease.py ' + j
   //           def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./copyTestsToRelease.py --version ' + version + ' --project ' + project + ' --cycle ' + cycle
   //           status = sh(script: s, returnStatus: true);
   //           println status
   //           if(status != 0) {
   //               println "copyTestsToRelease.py failed"
   //               currentBuild.result = 'FAILURE'
   //           }

   //           def s2 = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./updateCycleJira.py --project ' + project + ' --version ' + version + ' --cycle ' + cycle + ' --startdate'
   //           status2 = sh(script: s2, returnStatus: true);
   //           println status2
   //           if(status2 != 0) {
   //              println "updateCycleJira.py startdate failed"
   //              currentBuild.result = 'FAILURE'
   //           }
   //       }
   //   }
   //} else {
   //   echo "error: not copying tests since currentBuild=Failure. checkout failed."
  // }

   if(currentBuild.result != 'FAILURE') {
      stage('run WS tests parallel batch 1') {
         for(int i=0; i < jobList1Parallel.size(); ++i) {
            def jobName = jobList1Parallel[i];
            echo "i1=" + jobName
            builds1[jobName] = {
               build job: jobName, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle), string(name: 'Controller', value: controller), string(name: 'MasterController', value: mastercontroller), string(name: 'DME', value: dme), string(name: 'CommitVersion', value: commit_version), string(name: 'DMERest', value: dmerest), string(name: 'DMERestCert', value: dmerestcert)]
	    }
         }
         for(int i=0; i < jobList1Parallelgcpazure.size(); ++i) {
            def jobName = jobList1Parallelgcpazure[i];
            echo "i1=" + jobName
            builds1[jobName] = {
               build job: jobName, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle), string(name: 'Controller', value: controllerazuregcp), string(name: 'MasterController', value: mastercontroller), string(name: 'DME', value: dmeazuregcp), string(name: 'CommitVersion', value: commit_version)]
            }
         }
         for(int i=0; i < jobList1Platform.size(); ++i) {
           for(int i2=0; i2 < platform_list.size(); ++i2) {
            def jobName = jobList1Platform[i];
            def platform = platform_list[i2]
            def jobName_platform = jobName + platform
            echo "i1=" + jobName + " " + platform
               if(platform == 'VCD') {
                   number_parallel_executions = number_parallel_executionsVCD
               } else if (platform == 'Vsphere') {
                   number_parallel_executions = number_parallel_executionsVsphere
               } else {
                   number_parallel_executions = number_parallel_executionsOpenstack
               }
            builds1[jobName_platform] = {
               build job: jobName, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle), string(name: 'Controller', value: controller), string(name: 'MasterController', value: mastercontroller), string(name: 'DME', value: dme), string(name: 'CommitVersion', value: commit_version), string(name: 'NumberParallelExecutions', value: number_parallel_executions), string(name: 'DMERest', value: dmerest), string(name: 'DMERestCert', value: dmerestcert), string(name: 'Platform', value: platform)]
	    }
           }
           }

         try {
            parallel builds1
         } catch(err) {
            echo "Caught in run parallel batch 1: ${err}"
            currentBuild.result = 'FAILURE'
         }
      }

      stage('run CRM Maintenance') {
         build job: jobListMaintenance[0], parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle), string(name: 'Controller', value: controllerazuregcp), string(name: 'MasterController', value: mastercontroller), string(name: 'DME', value: dmeazuregcp), string(name: 'CommitVersion', value: commit_version)]
      }

//      stage('run WS tests parallel batch 2') {
//         for(int i=0; i < jobList2Parallel.size(); ++i) {
//            def jobName = jobList2Parallel[i];
//            echo "i1=" + jobName
//            builds2[jobName] = {
//               build job: jobName, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle), string(name: 'Controller', value: controller), string(name: 'DME', value: dme)]
//	    }
//         }
//
//         try {
//            parallel builds2
//         } catch(err) {
//            echo "Caught in run parallel batch 2: ${err}"
//            currentBuild.result = 'FAILURE'
//         }
//      }

      //dir('go/src/github.com/mobiledgex/jenkins') {
      //    def s3 = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./updateCycleJira.py  --project ' + project + ' --version ' + version + ' --cycle ' + cycle + ' --enddate'
      //    status3 = sh(script: s3, returnStatus: true);
      //    println status3
      //    if(status3 != 0) {
      //        println "updateCycleJira.py endate failed"
      //        currentBuild.result = 'FAILURE'
      //    }
      //}
   } else {
      echo "error: not running ws tests since currentBuild=Failure. copy tests to release failed"
   }

}

    
