cycle = "${cycle}"
//components = "${components}"
//controller = "${controller}"
controller = "controllerunset"
mc = "mcunset"
mccert = ""
dme = "dmeunset"
dmerest = "dmerestunset"
dmerestcert = "dmerestcertunset"
kubeconfig="kubeconfigunset"
crm_azure_pod_name = "crmazurepodnameunset"
crm_gcp_pod_name = "crmgcppodnameunset"
openstack_dedicated_env = "openstackenvunset"
openstack_shared_env = "openstackenvunset"
openstack_vm_env = "openstackenvunset"
openstack_gpu_env = "openstackenvunset"
influx = "influxnotset"

//commit_version = "${CommitVersion}"
commit_version = "commitversionunset"

if (env.dme) {
    dme = "${DME}"
}
if (env.dmerest) {
    dmerest = "${DMERest}"
    dmerestcert = "${DMERestCert}"
}
if (env.kubeconfig) {
    kubeconfig = "${KUBECONFIG}"
}
if (env.crmazurepodname) {
    crm_azure_pod_name = "${CRMAzurePodName}"
}
if (env.crmgcppodname) {
    crm_gcp_pod_name = "${CRMGcpPodName}"
}
if (env.openstackenv) {
    openstack_env = "${OpenStackEnv}"
}
if (env.openstackenvdedicated) {
    openstack_dedicated_env = "${OpenStackEnvDedicated}"
}
if (env.openstackenvshared) {
    openstack_shared_env = "${OpenStackEnvShared}"
}
if (env.openstackenvgpu) {
    openstack_gpu_env = "${OpenStackEnvGPU}"
}
if (env.openstackenvvm) {
    openstack_vm_env = "${OpenStackEnvVM}"
}
if (env.mastercontroller) {
    mc = "${MasterController}"
}
if (env.mastercontrollercert) {
    mccert = "${MasterControllerCert}"
}
if (env.controller) {
   controller = "${controller}" 
}
if (env.commit_version) {
   commit_version = "${CommitVersion}"
}
if (env.influxdb) {
   influx = "${InfluxDB}"
}


echo dme
echo cycle
echo controller

currentBuild.displayName = cycle

node('jenkinsGcpSlave1'){
    stage('Checkout') {
       try {
          sh 'docker system prune -af'  //remove all docker stuff without prompting
        } catch (err) {
           echo 'docker prune failed. mayber already running'
        }
        // delete old protos before git and build
        dir('go/src/github.com/mobiledgex/protos') {
           sh 'rm -rf *'
        }

       dir('go/src/github.com/mobiledgex/edge-cloud-sampleapps') {
          git branch: 'master',
          credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
          url: 'https://github.com/mobiledgex/edge-cloud-sampleapps.git'
       }

        dir('go/src/github.com/mobiledgex') {
            checkout([$class: 'GitSCM',
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'testcases/*'],
                        [$class:'SparseCheckoutPath', path:'jenkins/*'],
                        [$class:'SparseCheckoutPath', path:'modules/*'],
                        [$class:'SparseCheckoutPath', path:'protos/*'],
                        [$class:'SparseCheckoutPath', path:'tools/*'],
                        [$class:'SparseCheckoutPath', path:'certs/*']
                    ]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud-qa.git']]])

                //unstash 'edge-cloud_stash'
        }

        dir('go/src/github.com/mobiledgex/edge-cloud') {
           sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/*'
        }
        dir('go/src/github.com/mobiledgex/edge-proto') {
           sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-proto/*'
        }
        
        dir('go/src/github.com/mobiledgex/edge-cloud') {
            checkout([$class: 'GitSCM',
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'edgeproto/*'],
                        [$class:'SparseCheckoutPath', path:'d-match-engine/dme-proto/*'],
                        [$class:'SparseCheckoutPath', path:'protoc-gen-cmd/protocmd/*'],
                        [$class:'SparseCheckoutPath', path:'protogen/*']
                    ]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud.git']]])
        }

        if (env.commit_version) {
           dir('go/src/github.com/mobiledgex/edge-cloud') {
              def t = 'git reset --hard ' + commit_version
              def tout  = sh(script: t, returnStdout: true);
           }
        }

        dir('go/src/github.com/mobiledgex/edge-proto') {
           git branch: 'master',
           credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
           url: 'https://github.com/mobiledgex/edge-proto.git'
        }

    }

    stage("build protos") {
      dir('go/src/github.com/mobiledgex/tools') {
         status = sh(script:'/usr/bin/python3 ./build_protos.py --sourcedir $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/ --sourcedir_proto $WORKSPACE/go/src/github.com/mobiledgex/edge-proto/ --qadir $WORKSPACE/go/src/github.com/mobiledgex', returnStatus: true);
         println status
         if(status != 0) {
            echo "build_protos.py failed with statuscode=" + status
            currentBuild.result = 'FAILURE'
         }
      }

    }

    stage("execute tests") {
      dir('go/src/github.com/mobiledgex/jenkins') {
         status = sh(script:'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;export PATH=$PATH:$WORKSPACE/go/src/github.com/mobiledgex/tools:/home/jenkins/go/bin;export AUTOMATION_CONTROLLER_ADDRESS=' + controller + ';export AUTOMATION_DME_ADDRESS=' + dme + ';export AUTOMATION_DME_REST_ADDRESS=' + dmerest + ';export AUTOMATION_DME_CERT=' + dmerestcert + ';export AUTOMATION_KUBECONFIG=$WORKSPACE/' + kubeconfig + ';export AUTOMATION_CRM_AZURE_POD_NAME=' + crm_azure_pod_name + ';export AUTOMATION_CRM_GCP_POD_NAME=' + crm_gcp_pod_name + ';export AUTOMATION_OPENSTACK_DEDICATED_ENV=' + openstack_dedicated_env + ';export AUTOMATION_OPENSTACK_SHARED_ENV=' + openstack_shared_env + ';export AUTOMATION_OPENSTACK_VM_ENV=' + openstack_vm_env + ';export AUTOMATION_OPENSTACK_GPU_ENV=' + openstack_gpu_env + ';export AUTOMATION_MC_ADDRESS=' + mc + ';export AUTOMATION_MC_CERT=' + mccert + ';export AUTOMATION_INFLUXDB_ADDRESS=' + influx + ';./execJira_parallel.py', returnStatus: true);
         println status
         if(status != 0) {
            echo "execJira.py failed with statuscode=" + status
            currentBuild.result = 'FAILURE'
         }
      }

    }
}

