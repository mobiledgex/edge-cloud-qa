cycle = "${cycle}"
//components = "${components}"
controller = "${controller}"
dme = "dmeunset"
kubeconfig="kubeconfigunset"
crm_azure_pod_name = "crmazurepodnameunset"
crm_gcp_pod_name = "crmgcppodnameunset"
openstack_env = "openstackenvunset"
commit_version = "${CommitVersion}"

if (env.dme) {
    dme = "${DME}"
}
if (env.kubeconfig) {
    kubeconfig = "${KUBECONFIG}"
}
if (env.crmazurepodname) {
    crm_azure_pod_name = "${CRMAzurePodName}"
}
if (env.crmgcppodname) {
    crm_gcp_pod_name = "${CRMGcpPodName}"
}
if (env.openstackenv) {
    openstack_env = "${OpenStackEnv}"
}


echo dme
echo cycle
echo controller

currentBuild.displayName = cycle

node('jenkinsGcpSlave1'){
    stage('Checkout') {
        dir('go/src/github.com/mobiledgex') {
            checkout([$class: 'GitSCM',
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'testcases/*'],
                        [$class:'SparseCheckoutPath', path:'jenkins/*'],
                        [$class:'SparseCheckoutPath', path:'modules/*'],
                        [$class:'SparseCheckoutPath', path:'protos/*'],
                        [$class:'SparseCheckoutPath', path:'tools/*'],
                        [$class:'SparseCheckoutPath', path:'certs/*']
                    ]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud-qa.git']]])

                //unstash 'edge-cloud_stash'
        }
        
        dir('go/src/github.com/mobiledgex/edge-cloud') {
            checkout([$class: 'GitSCM',
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'edgeproto/*'],
                        [$class:'SparseCheckoutPath', path:'d-match-engine/dme-proto/*'],
                        [$class:'SparseCheckoutPath', path:'protoc-gen-cmd/protocmd/*'],
                        [$class:'SparseCheckoutPath', path:'protogen/*']
                    ]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud.git']]])
        }

        dir('go/src/github.com/mobiledgex/edge-cloud') {
           def t = 'git reset --hard ' + commit_version
           def tout  = sh(script: t, returnStdout: true);
        }

    }

    stage("build protos") {
      dir('go/src/github.com/mobiledgex/tools') {
         status = sh(script:'/usr/bin/python3 ./build_protos.py --sourcedir $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/ --qadir $WORKSPACE/go/src/github.com/mobiledgex', returnStatus: true);
         println status
         if(status != 0) {
            echo "build_protos.py failed with statuscode=" + status
            currentBuild.result = 'FAILURE'
         }
      }

    }

    stage("execute tests") {
      dir('go/src/github.com/mobiledgex/jenkins') {
         status = sh(script:'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;export PATH=$PATH:$WORKSPACE/go/src/github.com/mobiledgex/tools:/home/jenkins/go/bin;export AUTOMATION_CONTROLLER_ADDRESS=' + controller + ';export AUTOMATION_DME_ADDRESS=' + dme + ';export AUTOMATION_KUBECONFIG=$WORKSPACE/' + kubeconfig + ';export AUTOMATION_CRM_AZURE_POD_NAME=' + crm_azure_pod_name + ';export AUTOMATION_CRM_GCP_POD_NAME=' + crm_gcp_pod_name + ';export AUTOMATION_OPENSTACK_ENV=' + openstack_env + ';./execJira_parallel.py', returnStatus: true);
         println status
         if(status != 0) {
            echo "execJira.py failed with statuscode=" + status
            currentBuild.result = 'FAILURE'
         }
      }

    }
}

