import java.text.SimpleDateFormat

dateParm = "${BuildDate}"
commit_version = "notset"
image = "registry.mobiledgex.net:5000/mobiledgex/edge-cloud"

def jobList1Parallel = ["runControllerTests", "runMetricsTests", "runRunCommandTests", "runAccountTests", "runUserRoleTests", "runCSharpTests", "runCPPTests", "runRunConsoleTests", "runFaceDetectionTests","runDMETests", "runClusterSvcTests", "runRootlbTests", "runShowLogsTests", "runVMPoolControllerTests", "runSecurityTests", "runUserTests", "runMCConfigsTests"]
def jobListGcp = ["runCrmTests"]
def jobList2Parallel = ["runCloudletPoolAllTests", "runOrganizationTests", "runShowNodeTests", "runPerformance", "RunCRMResourceManagement"]
def jobListPerformance=["Performance"]
def jobListSequence=["runPasswordTests"]
def jobListOwaspZAP=["OWASP ZAP"]
def jobListNmapScanning=["nmap scanning"]
def jobListImageScanning=["Image Scanning"]
def jobListConsole=["runConsoleTests"]

builds1 = [:]
builds2 = [:]
builds3 = [:]
builds4 = [:]
builds5 = [:]
builds6 = [:]
builds7 = [:]

def add_tests_to_folder(version, project, cycle, folder, components=null, components_omit=null) {
    def status = -1
    def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./copyTestsToRelease.py --version ' + version + ' --project ' + project + ' --cycle ' + cycle +  ' --folder ' + folder
    if (components != null) {
        s = s + ' --component ' + components
    }
    if (components_omit != null) {
        s = s + ' --componentOmit ' + components_omit
    }
    status = sh(script: s, returnStatus: true);
    println status
    if(status != 0) {
        println "copyTestsToRelease.py failed"
        currentBuild.result = 'FAILURE'
        throw new Exception("Copy tests to release failed")
    }
}

node('jenkinsSlave1'){
    date = new Date()
    sdate = new SimpleDateFormat("yyy-MM-dd")
    Calendar cal = Calendar.getInstance()

    dateValue = "notset"
    if(dateParm == "today") {
       dateValue = sdate.format(date)
       //cal = Calendar.getInstance()
       //cal.add(Calendar.DATE, -1)
       //dateValue = sdate.format(cal.getTime())
    } else {
       dateValue = dateParm
    }
    //year = date[Calendar.YEAR]
    //month = date[Calendar.MONTH] + 1
    //date = date.getAt(Calendar.DATE)
    //tag = Version + '_automation_' + year + month + date
    //cycle = Version + '_automation_' + dateValue
    cycle = dateValue + '_' + Version
    folder_list = ['openstack', 'console', 'vsphere', 'vcd', 'dme', 'sdk', 'controller', 'metrics', 'performance/security']

    tag = dateValue
    project = "${project}"
    
    currentBuild.displayName = cycle

    try {
       stage('Checkout') {
          dir('go/src/github.com/mobiledgex') {
             checkout([$class: 'GitSCM', 
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'jenkins/*'],[$class:'SparseCheckoutPath', path:'modules/*'],[$class:'SparseCheckoutPath', path:'tools/*'],[$class:'SparseCheckoutPath', path:'testcases/config/*']]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud-qa.git']]])
	  }
	  dir('go/src/github.com/mobiledgex/edge-cloud') {
             sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/*'
          }
	  dir('go/src/github.com/mobiledgex/edge-cloud-infra') {
             sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-cloud-infra/*'
          }
	  dir('go/src/github.com/mobiledgex/edge-proto') {
             sh 'rm -rf $WORKSPACE/go/src/github.com/mobiledgex/edge-proto/*'
          }

          dir('go/src/github.com/mobiledgex/edge-cloud') {
             checkout([$class: 'GitSCM',
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'edgeproto/*'],
                        [$class:'SparseCheckoutPath', path:'d-match-engine/dme-proto/*'],
                        [$class:'SparseCheckoutPath', path:'protoc-gen-cmd/protocmd/*'],
                        [$class:'SparseCheckoutPath', path:'protogen/*']
                    ]]
                ],
             submoduleCfg: [],
             userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
             url: 'https://github.com/mobiledgex/edge-cloud.git']]])
          }

          dir('go/src/github.com/mobiledgex/edge-cloud-infra') {
             //git branch: 'master',
             //credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
             //url: 'https://github.com/mobiledgex/edge-cloud-infra.git'
             checkout([$class: 'GitSCM',
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'chef/*'],[$class:'SparseCheckoutPath', path:'ansible/*']]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud-infra.git']]])
          }

          dir('go/src/github.com/mobiledgex/edge-proto') {
             git branch: 'master',
             credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
             url: 'https://github.com/mobiledgex/edge-proto.git'
          }

       }
    }  catch (e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
	  def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "checkout of edge-cloud-qa failed. Aborting"'
          status = sh(script: s, returnStatus: true);
       }
       error('Aborting the build')
    }

    try {
       stage('Check Load Exists') {
          def s = 'curl -s https://mobiledgex:sandhill@registry.mobiledgex.net:5000/v2/mobiledgex/edge-cloud/tags/list | jq ".tags | index(\\"' + tag + '\\")"'
          def index  = sh(script: s, returnStdout: true);
	  int indexnum = index as Integer
          if(indexnum < 1) {
             println "${s} failed"
             currentBuild.result = 'FAILURE'
          }

       }
    }  catch (e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
          def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "load=' + tag + ' doesnt exist in registry. Aborting"'
          status = sh(script: s, returnStatus: true);
       }
       error('Aborting the build')
    }

    try {
        stage('Chef deploy') {
          dir('/home/jenkins/workspace/upgradeEdgecloud/go/src/github.com/mobiledgex/edge-cloud-infra/chef/policyfiles') {
          def status = -1
          def s = "echo \"override['qa']['edgeCloudVersion'] = '" + tag + "'\" >> docker_crm.rb && rm docker_crm.lock.json && chef install docker_crm.rb "
          status = sh(script: s, returnStatus: true);
          }
       }
    } catch (e) {
      dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
	      def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "Chef deploy failed. Aborting"'		
          status = sh(script: s, returnStatus: true);
       }
       error('Aborting the build')
    }

//    error('andy quit')
//    try {
//       stage('make test') {
//          dir('go/src/github.com/mobiledgex/edge-cloud') {
//             sh 'export ANSIBLE_DIR=$WORKSPACE/go/src/github.com/mobiledgex/edge-cloud/setup-env/ansible;export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin:$WORKSPACE/go/bin;export GOROOT=/usr/local/go;export GOPATH=$WORKSPACE/go;make test'
//          }
//       }
//    } catch (e) {
//       currentBuild.result = 'UNSTABLE'
//       result = "FAIL" // make sure other exceptions are recorded as failure too
//       dir('go/src/github.com/mobiledgex/jenkins') {
//          def status = -1
//          def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "make test for Build ' + tag + ' failed. Continuing execution anyways"'
//          status = sh(script: s, returnStatus: true);
//       }
//    }

    try {
       stage('Pull Image') {
          sh 'docker system prune -af'  //remove all docker stuff without prompting
	  sh 'docker pull registry.mobiledgex.net:5000/mobiledgex/edge-cloud:latest'
	  
          def s = 'docker run --rm registry.mobiledgex.net:5000/mobiledgex/edge-cloud:' + tag + ' version'
          def index  = sh(script: s, returnStdout: true);
         // (commit_version, image_name) = index.split(',')
  	 // dir('go/src/github.com/mobiledgex/edge-cloud') {
         //    def t = 'git reset --hard ' + commit_version
         //    def tout  = sh(script: t, returnStdout: true);
	 //    //stash name:'edge-cloud_stash', includes:'edge-cloud/**'
         // }
       }
    }  catch (e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
	  def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "Error pulling image load=' + tag + '. Aborting"'
          status = sh(script: s, returnStatus: true);
       }
       error('Aborting the build')
    }

    // do this temp until deletecloudlet after controller restart is fixed
    try {    
       stage("create cycle") {
          dir('go/src/github.com/mobiledgex/jenkins') {
             def status = -1
             def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;./createCycleAddTestcases.py --version ${Version} --project ECQ --cycle ' + cycle
             status = sh(script: s, returnStatus: true);
             if(status != 0) {
                 println "${s} failed"
                 currentBuild.result = 'FAILURE'
                 throw new Exception("Create cycle failed")
             }

             for(int i=0; i < folder_list.size(); ++i) {
                def folderName = folder_list[i];
                echo "folder=" + folderName
                status = -1
                   s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;./createCycleAddTestcases.py --version ${Version} --project ECQ --cycle ' + cycle + ' --folder ' + folderName
                   status = sh(script: s, returnStatus: true);
                   if(status != 0) {
                       println "create ${folderName} folder failed with status=${status}"
                       currentBuild.result = 'FAILURE'
                       throw new Exception("Create folder ${folderName} failed")
                   }
             }
	  }

          dir('go/src/github.com/mobiledgex/jenkins') {

           // add_tests_to_folder(version, project, cycle, 'console', 'Automated,WebUI', null)
              add_tests_to_folder(version, project, cycle, 'sdk', 'Automated,SDK', null)
              add_tests_to_folder(version, project, cycle, 'dme', 'Automated,DME', 'SDK,Metrics,Performance')
              add_tests_to_folder(version, project, cycle, 'openstack', 'Automated,CRM,Openstack', null)
              add_tests_to_folder(version, project, cycle, 'vsphere', 'Automated,CRM,Vsphere', null)
              add_tests_to_folder(version, project, cycle, 'vcd', 'Automated,CRM,VCD', null)
              add_tests_to_folder(version, project, cycle, 'controller', 'Automated,Controller', null)
              add_tests_to_folder(version, project, cycle, 'controller', 'Automated,MasterController', null)
              add_tests_to_folder(version, project, cycle, 'metrics', 'Automated,Metrics', null)
              add_tests_to_folder(version, project, cycle, 'performance/security', 'Automated,Performance', null)
              add_tests_to_folder(version, project, cycle, 'performance/security', 'Automated,Security', null)
          }
       } 
    } catch(e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
          def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "cycle creation in Jira/Zephyr for Build ' + tag + ' failed. Aborting"'
          status = sh(script: s, returnStatus: true);
       }
       error('Aborting the build')
    }

    try {    
       stage("delete CRMs") {
          dir('go/src/github.com/mobiledgex/jenkins') {
	     try {
                build job: 'deleteCrms', parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle)]
             } catch(e) {
	        echo('deleteCrms job failed. continuing')
	     }
	  }
       }
    } catch(e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
          def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "deleting CRMs for Build ' + tag + ' failed. Continue anyway"'
          status = sh(script: s, returnStatus: true);
       }
       echo('Delete CRM failed. Continue anyway')
       currentBuild.result = 'UNSTABLE'

    }

    try {
       stage('deploy processes in k8s') {
          dir('go/src/github.com/mobiledgex/edge-cloud-infra/ansible') {
             // fix known_hosts file since recreating the server causes a mismatch in the file
             sh 'ssh-keygen -f "/home/jenkins/.ssh/known_hosts" -R "automationbonncloudlet.tdg.mobiledgex.net"'
             sh 'ssh-keygen -f "/home/jenkins/.ssh/known_hosts" -R "automationhamburgcloudlet.tdg.mobiledgex.net"'
	     
             sh 'export GITHUB_USER=andya072071;export GITHUB_TOKEN=16a8cf8e79fad4a98bba2e59544d8faf78fca71d;export VAULT_ROLE_ID="22c16b60-1ac5-4a32-cc07-05037475a717";export VAULT_SECRET_ID="67c96872-878e-9442-4440-ff76ce65cea5";./deploy.sh -V ' + tag + ' qa' 
             //sh 'docker system prune -af'  //remove all docker stuff without prompting

             sleep 60  // wait for all pods to come up

             // defrag etcd
             sh 'kubectl config use-context mexplat-qa-us;kubectl exec -it mex-etcd-0 -- sh -c "ETCDCTL_API=3 etcdctl --endpoints=http://mex-etcd-0.mex-etcd:2379,http://mex-etcd-1.mex-etcd:2379,http://mex-etcd-2.mex-etcd:2379 defrag"'
             sh 'kubectl config use-context mexplat-qa-eu;kubectl exec -it mex-etcd-0 -- sh -c "ETCDCTL_API=3 etcdctl --endpoints=http://mex-etcd-0.mex-etcd:2379,http://mex-etcd-1.mex-etcd:2379,http://mex-etcd-2.mex-etcd:2379 defrag"'

	  }
       }
    } catch(e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
          def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "deploy to k8s for Build ' + tag + ' failed. Aborting"'
          status = sh(script: s, returnStatus: true);
       }
       error('Aborting the build')
    }


    try {    
       stage("create cycle") {
//          dir('go/src/github.com/mobiledgex/jenkins') {
//             def status = -1
//             def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;./createCycleAddTestcases.py --version ${Version} --project ECQ --cycle ' + cycle
//             status = sh(script: s, returnStatus: true);
//             if(status != 0) {
//                 println "${s} failed"
 //                currentBuild.result = 'FAILURE'
 //            }
//	  }
//       }

          dir('go/src/github.com/mobiledgex/jenkins') {
 //             def status = -1
 //             def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./copyTestsToRelease.py --version ' + version + ' --project ' + project + ' --cycle ' + cycle
 //             status = sh(script: s, returnStatus: true);
 //             println status
 //             if(status != 0) {
 //                 println "copyTestsToRelease.py failed"
 //                 currentBuild.result = 'FAILURE'
 //             }

              def s2 = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./updateCycleJira.py --project ' + project + ' --version ' + version + ' --cycle ' + cycle + ' --startdate'
              status2 = sh(script: s2, returnStatus: true);
              println status2
              if(status2 != 0) {
                 println "updateCycleJira.py startdate failed"
                 currentBuild.result = 'FAILURE'
              }
	  }
       }
    } catch(e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
          def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "cycle creation in Jira/Zephyr for Build ' + tag + ' failed. Aborting"'
          status = sh(script: s, returnStatus: true);
       }
       error('Aborting the build')
    }


    try {
       stage("upgrade CRMs") {
          dir('go/src/github.com/mobiledgex/jenkins') {
             try {
                build job: 'upgradeCrms', parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle), string(name: 'CRMVersion', value: tag)]
             } catch(e) {
                echo('deleteCrms job failed. continuing')
             }
          }
       }
    } catch(e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
          def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "upgrade CRMs for Build ' + tag + ' failed. Continue anyway"'
          status = sh(script: s, returnStatus: true);
       }
       echo('Delete CRM failed. Continue anyway')
       currentBuild.result = 'UNSTABLE'

    }

    try {    
       stage("start CRMs") {
          dir('go/src/github.com/mobiledgex/jenkins') {
             build job: 'startCrms', parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle)]

	  }
       }
    } catch(e) {
       dir('go/src/github.com/mobiledgex/jenkins') {
          def status = -1
          def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./slackMessage.py "creating CRMs for Build ' + tag + ' failed. Continue anyway"'
          status = sh(script: s, returnStatus: true);
       }
       echo('CRM create failed. Continue anyway')
       currentBuild.result = 'UNSTABLE'
    }

//////////////////////////////////////////////////////
//  run testcases
/////////////////////////////////////////////////////
    if(currentBuild.result != 'FAILURE') {
       stage('run tests') {
          echo "running tests"
 
          // run gcp slave tests
          for(int i=0; i < jobListGcp.size(); ++i) {
             def jobName = jobListGcp[i];
             echo "i1=" + jobName
             builds1[jobName] = {
                build job: jobName, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle), string(name: 'CommitVersion', value: commit_version)]
	     }
	  }

          // parallel 1 tests
          for(int i=0; i < jobList1Parallel.size(); ++i) {
             def jobName = jobList1Parallel[i];
             echo "i1=" + jobName
             builds1[jobName] = {
                build job: jobName, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle)]
	     }
	  }
          try {
            parallel builds1
          } catch(err) {
              echo "caugh exec running tests error: ${err}"
              currentBuild.result = 'FAILURE'
          }

          // parallel 2 tests
          for(int i=0; i < jobList2Parallel.size(); ++i) {
             def jobName = jobList2Parallel[i];
             echo "i1=" + jobName
             builds2[jobName] = {
                build job: jobName, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle)]
	     }
	  }
          try {
            parallel builds2
          } catch(err) {
              echo "caugh exec running tests error: ${err}"
              currentBuild.result = 'FAILURE'
          }

          // OwaspZAP tests
          for(int i=0; i < jobListOwaspZAP.size(); ++i) {
             def jobName = jobListOwaspZAP[i];
             echo "i1=" + jobName
             builds4[jobName] = {
                build job: jobName //, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle)]
             }
          }          
          try {
            parallel builds4
          } catch(err) {
              echo "caugh exec running tests error: ${err}"
              currentBuild.result = 'FAILURE'
          }

          // nmap tests
          for(int i=0; i < jobListNmapScanning.size(); ++i) {
             def jobName = jobListNmapScanning[i];
             echo "i1=" + jobName
             builds5[jobName] = {
                build job: jobName //, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle)]
             }
          } 
          try {
            parallel builds5
          } catch(err) {
              echo "caugh exec running tests error: ${err}"
              currentBuild.result = 'FAILURE'
          }

          // image scanning tests
          for(int i=0; i < jobListImageScanning.size(); ++i) {
             def jobName = jobListImageScanning[i];
             echo "i1=" + jobName
             builds6[jobName] = {
                build job: jobName //, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle)]
             }
          }
          try {
            parallel builds6
          } catch(err) {
              echo "caugh exec running tests error: ${err}"
              currentBuild.result = 'FAILURE'
          }

          // sequence tests
          for(int i=0; i < jobListSequence.size(); ++i) {
             def jobName = jobListSequence[i];
             echo "i1=" + jobName
             builds7[jobName] = {
                 build job: jobName, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle)]
             }
          }
          try {
            parallel builds7
          } catch(err) {
              echo "caugh exec running tests error: ${err}"
              currentBuild.result = 'FAILURE'
          }

          // performance tests
          for(int i=0; i < jobListPerformance.size(); ++i) {
             def jobName = jobListPerformance[i];
             echo "i1=" + jobName
             builds3[jobName] = {
                build job: jobName //, parameters: [string(name: 'Project', value: project), string(name: 'Version', value: Version), string(name: 'Cycle', value: cycle)]
             }
          }
          try {
            def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;./slackMessage.py "Start Metrics Peformance Test"'
            status = sh(script: s, returnStatus: true);
            parallel builds3
          } catch(err) {
              echo "caugh exec running tests error: ${err}"
              currentBuild.result = 'FAILURE'
          }

          // update cycle as done
          dir('go/src/github.com/mobiledgex/jenkins') {
              def s3 = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;python3 ./updateCycleJira.py  --project ' + project + ' --version ' + version + ' --cycle ' + cycle + ' --enddate'
              status3 = sh(script: s3, returnStatus: true);
              println status3
              if(status3 != 0) {
                  println "updateCycleJira.py endate failed"
                  currentBuild.result = 'FAILURE'
              }
          }
       }

///////////////////////////////////////
//  slack report
///////////////////////////////////////
       stage('slack report') {
          echo "slack report"
          job_duration = System.currentTimeMillis() - currentBuild.startTimeInMillis 
          job_duration_string = job_duration.toString()
          //build job: 'createReport', parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: loadname), [$class: 'NodeParameterValue', name: 'node', labels:["${node}"], nodeEligibility: [$class: 'AllNodeEligibility']]]
	  build job: 'createReport', parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle), string(name: 'JobDuration', value: job_duration_string)]
       }

//       stage('run console tests') {
//          echo "running console tests"
//
//          for(int i=0; i < jobListConsole.size(); ++i) {
//             build job: jobListConsole[0], parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle_console)]
//          }
//       }
//
//       stage('slack console report') {
//          echo "slack report"
//          build job: 'createReport', parameters: [string(name: 'Project', value: project), string(name: 'Version', value: version), string(name: 'Cycle', value: cycle_console)]
//       }

   } else {
       echo "build was failure so not running any tests"
   }

//   post {
//      failure {
//         dir('go/src/github.com/mobiledgex/jenkins') {
//            def status = -1
//            def s = 'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;./slackMessage.py "Build ' + cycle + ' failed"'
//            status = sh(script: s, returnStatus: true);
//            if(status != 0) {
//               println "${s} failed"
//               currentBuild.result = 'FAILURE'
//            }
//         }
//      }
//   }

}
