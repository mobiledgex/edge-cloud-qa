cycle = "${cycle}"
//components = "${components}"
controller = "controllerunset"
mc = "mcunset"
mccert = ""
dme = "dmeunset"
dmerest = "dmerestunset"
dmerestcert = "dmerestcertunset"

if (env.dme) {
    dme = "${DME}"
}
if (env.dmerest) {
    dmerest = "${DMERest}"
    dmerestcert = "${DMERestCert}"
}
if (env.mastercontroller) {
    mc = "${MasterController}"
    //mccert = "${MasterControllerCert}"
}
if (env.mastercontrollercert) {
    mccert = "${MasterControllerCert}"
}
if (env.controller) {
    controller = "${controller}"
}

echo dme
echo cycle
//echo controller

currentBuild.displayName = cycle

node('jenkinsSlave1'){
    stage('Checkout') {
        dir('go/src/github.com/mobiledgex') {
            checkout([$class: 'GitSCM', 
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                        [$class:'SparseCheckoutPath', path:'testcases/*'],
                        [$class:'SparseCheckoutPath', path:'jenkins/*'],
                        [$class:'SparseCheckoutPath', path:'modules/*'],
                        [$class:'SparseCheckoutPath', path:'protos/*'],
                        [$class:'SparseCheckoutPath', path:'tools/*'],
                        [$class:'SparseCheckoutPath', path:'certs/*']
                    ]]
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
                url: 'https://github.com/mobiledgex/edge-cloud-qa.git']]])
        }
//        dir('go/src/github.com/mobiledgex/edge-cloud') {
//            checkout([$class: 'GitSCM',
//                branches: [[name: 'master']],
//                doGenerateSubmoduleConfigurations: false,
//                extensions: [
//                    [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
//                        [$class:'SparseCheckoutPath', path:'edgeproto/*'],
//                        [$class:'SparseCheckoutPath', path:'d-match-engine/dme-proto/*'],
//                        [$class:'SparseCheckoutPath', path:'protoc-gen-cmd/protocmd/*'],
//                        [$class:'SparseCheckoutPath', path:'protogen/*']
//                    ]]
//                ],
//                submoduleCfg: [],
//                userRemoteConfigs: [[credentialsId: '79b116ea-d7ac-4d6c-928d-49b79e5f9bef',
//                url: 'https://github.com/mobiledgex/edge-cloud.git']]])
//        }

    }
    //stage('start environment') {
    //    dir('go/src/github.com/mobiledgex/edge-cloud/tls/out/') {
    //        sh 'cp $HOME/workspace/buildEdgecloud/go/src/github.com/mobiledgex/edge-cloud/tls/out/* .'
    //    }
    //    dir('go/src/github.com/mobiledgex/edge-cloud/setup-env/e2e-tests/') {
    //        sh 'export ANSIBLE_DIR=$HOME/workspace/buildEdgecloud/go/src/github.com/mobiledgex/edge-cloud/setup-env/ansible;export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin:$HOME/workspace/buildEdgecloud/go/bin/;export GOROOT=/usr/local/go;export GOPATH=$WORKSPACE/go;e2e-tests -testfile testfiles/deploy_start_create_automation.yml -setupfile setups/local_multi_automation.yml -stop'
    //    }
    //}

    stage("build protos") {
      dir('go/src/github.com/mobiledgex/tools') {
         status = sh(script:'python3 ./build_protos.py --sourcedir /home/jenkins/workspace/runEdgecloud/go/src/github.com/mobiledgex/edge-cloud/ --sourcedir_proto /home/jenkins/workspace/runEdgecloud/go/src/github.com/mobiledgex/edge-proto/ --qadir $WORKSPACE/go/src/github.com/mobiledgex', returnStatus: true);
         println status
         if(status != 0) {
            echo "build_protos.py failed with statuscode=" + status
            currentBuild.result = 'FAILURE'
         }
      }

    }

    stage("execute tests") {
      dir('go/src/github.com/mobiledgex/jenkins') {
         status = sh(script:'export PYTHONPATH=$WORKSPACE/go/src/github.com/mobiledgex/modules;export PATH=$PATH:$WORKSPACE/go/src/github.com/mobiledgex/tools:/home/jenkins/go/bin;export AUTOMATION_CONTROLLER_ADDRESS=' + controller + ';export AUTOMATION_DME_ADDRESS=' + dme + ';export AUTOMATION_DME_REST_ADDRESS=' + dmerest + ';export AUTOMATION_DME_CERT=' + dmerestcert + ';export AUTOMATION_MC_ADDRESS=' + mc + ';export AUTOMATION_MC_CERT=' + mccert + ';export AUTOMATION_VERSION=' + env.crmversion + ';./execJira.py', returnStatus: true);
         println status
         if(status != 0) {
            echo "execJira.py failed with statuscode=" + status
            currentBuild.result = 'FAILURE'
         }
      }

    }
}
